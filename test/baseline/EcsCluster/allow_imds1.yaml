---
{
 "Outputs": {
  "ClusterArnOutput": {
   "Export": {
    "Name": {
     "Fn::Sub": "${EnvName}-EcsEnv-EcsCluster"
    }
   },
   "Value": {
    "Ref": "EcsCluster"
   }
  },
  "ClusterBucketOutput": {
   "Export": {
    "Name": {
     "Fn::Sub": "${EnvName}-EcsEnv-ClusterBucket"
    }
   },
   "Value": {
    "Ref": "ClusterBucket"
   }
  },
  "NodeSecurityGroupOutput": {
   "Export": {
    "Name": {
     "Fn::Sub": "${EnvName}-EcsEnv-NodeSg"
    }
   },
   "Value": {
    "Ref": "NodeSecurityGroup"
   }
  }
 },
 "Parameters": {
  "AmiId": {
   "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id",
   "Description": "AMI ID for EC2 cluster nodes",
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
  },
  "EnvName": {
   "Description": "The name of the ECS cluster.",
   "Type": "String"
  },
  "VpcId": {
   "Description": "The ID of the VPC where the ECS cluster will be created.",
   "Type": "String"
  }
 },
 "Resources": {
  "Asgt22xlarge": {
   "Properties": {
    "DesiredCapacity": "1",
    "LaunchConfigurationName": {
     "Ref": "LaunchConft22xlarge"
    },
    "MaxSize": "4",
    "MetricsCollection": [
     {
      "Granularity": "1Minute"
     }
    ],
    "MinSize": "0",
    "Tags": [
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": {
       "Fn::Sub": "ecs-node-${AWS::StackName}"
      }
     },
     {
      "Key": "a",
      "PropagateAtLaunch": true,
      "Value": "top_a"
     },
     {
      "Key": "b",
      "PropagateAtLaunch": true,
      "Value": "asg_b"
     },
     {
      "Key": "c",
      "PropagateAtLaunch": true,
      "Value": "asg_spec_c"
     }
    ],
    "VPCZoneIdentifier": [
     "subnet-123456"
    ]
   },
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "UpdatePolicy": {
    "AutoScalingRollingUpdate": {
     "MaxBatchSize": 1,
     "MinInstancesInService": 1,
     "MinSuccessfulInstancesPercent": 100,
     "PauseTime": "PT0M"
    }
   }
  },
  "Asgt22xlargeCapacityProvider": {
   "Properties": {
    "AutoScalingGroupProvider": {
     "AutoScalingGroupArn": {
      "Ref": "Asgt22xlarge"
     },
     "ManagedDraining": "ENABLED",
     "ManagedScaling": {
      "Status": "ENABLED",
      "TargetCapacity": 100
     },
     "ManagedTerminationProtection": "DISABLED"
    }
   },
   "Type": "AWS::ECS::CapacityProvider"
  },
  "CapacityProviderAssoc": {
   "Properties": {
    "CapacityProviders": [
     {
      "Ref": "Asgt22xlargeCapacityProvider"
     }
    ],
    "Cluster": {
     "Ref": "EcsCluster"
    },
    "DefaultCapacityProviderStrategy": [
     {
      "CapacityProvider": {
       "Ref": "Asgt22xlargeCapacityProvider"
      },
      "Weight": 1
     }
    ]
   },
   "Type": "AWS::ECS::ClusterCapacityProviderAssociations"
  },
  "ClusterBucket": {
   "Properties": {
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    }
   },
   "Type": "AWS::S3::Bucket"
  },
  "CpsReset": {
   "DependsOn": "CapacityProviderAssoc",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LambdaFunctionForCpsReset",
      "Arn"
     ]
    },
    "StrategyHash": "ea2228a74458d78fc595d424006f0738"
   },
   "Type": "Custom::CpsReset"
  },
  "EcsCluster": {
   "Properties": {
    "ClusterName": {
     "Ref": "EnvName"
    },
    "ClusterSettings": [
     {
      "Name": "containerInsights",
      "Value": "disabled"
     }
    ],
    "Tags": [
     {
      "Key": "a",
      "Value": "top_a"
     },
     {
      "Key": "b",
      "Value": "cluster_b"
     },
     {
      "Key": "c",
      "Value": "top_c"
     }
    ]
   },
   "Type": "AWS::ECS::Cluster"
  },
  "LambdaExecutionRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole"
    ],
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "autoscaling:CompleteLifecycleAction",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "ecs:ListContainerInstances",
          "ecs:ListServices",
          "ecs:DescribeClusters",
          "ecs:DescribeServices",
          "ecs:DescribeContainerInstances",
          "ecs:UpdateContainerInstancesState",
          "ecs:UpdateService",
          "sns:Publish"
         ],
         "Effect": "Allow",
         "Resource": "*"
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "lambda-inline"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "LambdaFunctionForCpsReset": {
   "Properties": {
    "Code": {
     "ZipFile": {
      "Fn::Sub": "import boto3\nimport cfnresponse\nimport os\nfrom functools import partial\nimport traceback\n\nCLUSTER = \"${EnvName}\"\nREGION = \"${AWS::Region}\"\n\n# Check if we're in a test environment, and if so set the region from the\n# environment or use a default.\nif \"AWS::Region\" in REGION:\n    REGION = os.environ.get(\"AWS_DEFAULT_REGION\", \"us-east-1\")\n    print(\"Test environment detected, setting REGION to\", REGION)\nelse:\n    print(\"REGION:\", REGION)\n\n\nECS = boto3.client(\"ecs\", region_name=REGION)\n\n\ndef chunks(it, chunk_size):\n    lst = list(it)\n    return [lst[i : i + chunk_size] for i in range(0, len(lst), chunk_size)]\n\n\ndef get_default_cps():\n    return ECS.describe_clusters(clusters=[CLUSTER])[\"clusters\"][0][\n        \"defaultCapacityProviderStrategy\"\n    ]\n\n\ndef get_service_arns():\n    paginator = ECS.get_paginator(\"list_services\")\n    for page in paginator.paginate(cluster=CLUSTER, launchType=\"EC2\"):\n        for arn in page[\"serviceArns\"]:\n            yield arn\n\n\ndef get_services():\n    for chunk in chunks(get_service_arns(), 10):\n        res = ECS.describe_services(cluster=CLUSTER, services=chunk)\n        for svc in res[\"services\"]:\n            yield svc\n\n\ndef set_cps(service_arn, cps):\n    try:\n        ECS.update_service(\n            cluster=CLUSTER,\n            service=service_arn,\n            capacityProviderStrategy=cps,\n            forceNewDeployment=True,\n        )\n    except:\n        print(\"Error updating CPS for service\", service_arn)\n        print(\"-----------------------------------------------------------\")\n        traceback.print_exc()\n        print(\"-----------------------------------------------------------\")\n\n\ndef update_all_services():\n    new_cps = get_default_cps()\n    print(\"Updating all services to new capacityProviderStrategy:\", new_cps)\n    for service in get_services():\n        service_name = service[\"serviceName\"]\n        old_cps = service.get(\"capacityProviderStrategy\", [])\n        sched_strat = service[\"schedulingStrategy\"]\n        if old_cps == new_cps:\n            print(service_name, \"already has the correct capacityProviderStrategy\")\n        elif sched_strat != \"REPLICA\":\n            print(service_name, \"scheduling strategy is\", sched_strat, \"not REPLICA\")\n        else:\n            print(\n                f\"Switching {service_name} capacityProviderStrategy from {old_cps} to {new_cps}\"\n            )\n            set_cps(service[\"serviceArn\"], new_cps)\n\n\ndef print_response(\n    responseStatus, responseData, physicalResourceId=None, noEcho=False, reason=None\n):\n    print(\"-----------------------------------------------------------\")\n    print(\n        f\"responseStatus: {responseStatus}\",\n        f\"\\nresponseData: {responseData}\",\n        f\"\\nphysicalResourceId: {physicalResourceId}\",\n        f\"\\nreason: {reason}\",\n    )\n    print(\"-----------------------------------------------------------\")\n\n\ndef lambda_handler(event, context):\n    print(\"event:\", event)\n    rt = event[\"RequestType\"]\n\n    if context is None:\n        # We're in a test environment\n        res_fn = print_response\n    else:\n        res_fn = partial(cfnresponse.send, event, context)\n\n    try:\n        if rt in [\"Create\", \"Update\"]:\n            update_all_services()\n        res_fn(cfnresponse.SUCCESS, {})\n    except Exception as err:\n        traceback.print_exc()\n        res_fn(cfnresponse.FAILED, {}, reason=str(err))\n"
     }
    },
    "Description": "Updates services in the cluster to use the new default CapacityProviderStrategy",
    "Handler": "index.lambda_handler",
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "LambdaExecutionRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 60
   },
   "Type": "AWS::Lambda::Function"
  },
  "LaunchConft22xlarge": {
   "Properties": {
    "IamInstanceProfile": {
     "Ref": "NodeInstanceProfile"
    },
    "ImageId": {
     "Ref": "AmiId"
    },
    "InstanceType": "t2.2xlarge",
    "KeyName": "somekey",
    "MetadataOptions": {
     "HttpTokens": "optional"
    },
    "SecurityGroups": [
     {
      "Ref": "NodeSecurityGroup"
     },
     "sg-12345",
     "sg-67890"
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Sub": [
       "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\nMIME-Version: 1.0\n\n--==BOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n#!/bin/bash -xe\n\n# Apply security upgrades\necho latest | sudo tee /etc/dnf/vars/releasever\ndnf upgrade -y --security\n\n# Install awslogs and the jq JSON parser\ndnf install -y jq wget aws-cfn-bootstrap aws-cli chrony python3-boto3\n\n# Enable NTP client to keep clock in sync\nsystemctl enable --now chronyd\n\n# Set the node's hostname\nhostname ecs-node-${EnvName}\n\ncat > /etc/ecs/ecs.config <<EOF\nECS_CLUSTER=${EnvName}\nECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"]\nEOF\n\n# Inject the CloudWatch Logs configuration file contents\ncat > /etc/awslogs/awslogs.conf <<- EOF\n[general]\nstate_file = /var/lib/awslogs/agent-state\n\n[/var/log/dmesg]\nfile = /var/log/dmesg\nlog_group_name = /var/log/dmesg\nlog_stream_name = {cluster}/{container_instance_id}\n\n[/var/log/messages]\nfile = /var/log/messages\nlog_group_name = /var/log/messages\nlog_stream_name = {cluster}/{container_instance_id}\ndatetime_format = %b %d %H:%M:%S\n\n[/var/log/docker]\nfile = /var/log/docker\nlog_group_name = /var/log/docker\nlog_stream_name = {cluster}/{container_instance_id}\ndatetime_format = %Y-%m-%dT%H:%M:%S.%f\n\n[/var/log/ecs/ecs-init.log]\nfile = /var/log/ecs/ecs-init.log\nlog_group_name = /var/log/ecs/ecs-init.log\nlog_stream_name = {cluster}/{container_instance_id}\ndatetime_format = %Y-%m-%dT%H:%M:%SZ\n\n[/var/log/ecs/ecs-agent.log]\nfile = /var/log/ecs/ecs-agent.log.*\nlog_group_name = /var/log/ecs/ecs-agent.log\nlog_stream_name = {cluster}/{container_instance_id}\ndatetime_format = %Y-%m-%dT%H:%M:%SZ\n\n[/var/log/ecs/audit.log]\nfile = /var/log/ecs/audit.log.*\nlog_group_name = /var/log/ecs/audit.log\nlog_stream_name = {cluster}/{container_instance_id}\ndatetime_format = %Y-%m-%dT%H:%M:%SZ\n\nEOF\n\n--==BOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n#!/bin/bash\n# Set the region to send CloudWatch Logs data to (the region where the container instance is located)\nregion=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)\nsed -i -e \"s/region = us-east-1/region = $region/g\" /etc/awslogs/awscli.conf\n\n--==BOUNDARY==\nContent-Type: text/upstart-job; charset=\"us-ascii\"\n\n#upstart-job\ndescription \"Configure and start CloudWatch Logs agent on Amazon ECS container instance\"\nauthor \"Amazon Web Services\"\nstart on started ecs\n\nscript\n  exec 2>>/var/log/ecs/cloudwatch-logs-start.log\n  set -x\n\n  until curl -s http://localhost:51678/v1/metadata\n  do\n    sleep 1\n  done\n\n  # Grab the cluster and container instance ARN from instance metadata\n  cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')\n  container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )\n\n  # Replace the cluster name and container instance ID placeholders with the actual values\n  sed -i -e \"s/{cluster}/$cluster/g\" /etc/awslogs/awslogs.conf\n  sed -i -e \"s/{container_instance_id}/$container_instance_id/g\" /etc/awslogs/awslogs.conf\n\n  service awslogs start\n  chkconfig awslogs on\nend script\n\n\n--==BOUNDARY==\n${ExtraUserData}\n",
       {
        "ExtraUserData": ""
       }
      ]
     }
    }
   },
   "Type": "AWS::AutoScaling::LaunchConfiguration"
  },
  "NodeInstanceProfile": {
   "Properties": {
    "Roles": [
     {
      "Ref": "NodeInstanceRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  },
  "NodeInstanceRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
     "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
     "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "ssm:GetParameters",
          "elasticfilesystem:DescribeMountTargets",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeFileSystems",
          "ec2:DescribeAvailabilityZones"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        },
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
         ],
         "Effect": "Allow",
         "Resource": [
          "arn:aws:logs:*:*:*"
         ]
        },
        {
         "Action": [
          "s3:ListBucket",
          "s3:GetObjectVersion",
          "s3:GetObjectVersionAcl",
          "s3:GetObject",
          "s3:GetObjectVersion"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "ClusterBucket",
            "Arn"
           ]
          },
          {
           "Fn::Sub": "${ClusterBucket.Arn}/*"
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "root"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "NodeSecurityGroup": {
   "Properties": {
    "GroupDescription": "Security group for ECS nodes",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "1.2.3.4/24",
      "IpProtocol": "-1"
     },
     {
      "CidrIp": "4.5.6.7/32",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "VpcId"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "ServiceRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ecs.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
    ]
   },
   "Type": "AWS::IAM::Role"
  }
 }
}
