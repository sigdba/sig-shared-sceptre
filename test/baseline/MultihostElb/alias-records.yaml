---
- Mappings:
    ElbAccountMap:
      af-south-1:
        AccountId: 098369216593
      ap-east-1:
        AccountId: '754344448648'
      ap-northeast-1:
        AccountId: '582318560864'
      ap-northeast-2:
        AccountId: '600734575887'
      ap-northeast-3:
        AccountId: '383597477331'
      ap-south-1:
        AccountId: '718504428378'
      ap-southeast-1:
        AccountId: '114774131450'
      ap-southeast-2:
        AccountId: '783225319266'
      ca-central-1:
        AccountId: '985666609251'
      cn-north-1:
        AccountId: '638102146993'
      cn-northwest-1:
        AccountId: '037604701340'
      eu-central-1:
        AccountId: 054676820928
      eu-north-1:
        AccountId: '897822967062'
      eu-south-1:
        AccountId: '635631232127'
      eu-west-1:
        AccountId: '156460612806'
      eu-west-2:
        AccountId: '652711504416'
      eu-west-3:
        AccountId: 009996457667
      me-south-1:
        AccountId: '076674570225'
      sa-east-1:
        AccountId: '507241528517'
      us-east-1:
        AccountId: '127311923021'
      us-east-2:
        AccountId: 033677994240
      us-gov-east-1:
        AccountId: '190560391635'
      us-gov-west-1:
        AccountId: 048591011584
      us-west-1:
        AccountId: 027434742980
      us-west-2:
        AccountId: '797873946194'
  Outputs:
    ElbSecurityGroup:
      Export:
        Name:
          Fn::Sub: ${AWS::StackName}-sgid
      Value:
        Ref: DefaultSecurityGroup
  Parameters:
    VpcId:
      Description: The ID of the VPC where the ECS cluster will be created.
      Type: String
  Resources:
    DefaultSecurityGroup:
      Properties:
        GroupDescription:
          Fn::Sub: Default security group for ${AWS::StackName}
        GroupName:
          Fn::Sub: ${AWS::StackName}-Default
        SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic from ELB
          FromPort: 0
          IpProtocol: '-1'
          ToPort: 65535
        SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: TCP
          ToPort: 80
        VpcId:
          Ref: VpcId
      Type: AWS::EC2::SecurityGroup
    ListenerOnPort80:
      Properties:
        Certificates: []
        DefaultActions:
        - FixedResponseConfig:
            ContentType: text/plain
            MessageBody: 'SIG-alias-records-test

              '
            StatusCode: '200'
          Type: fixed-response
        LoadBalancerArn:
          Ref: LoadBalancer
        Port: 80
        Protocol: HTTP
      Type: AWS::ElasticLoadBalancingV2::Listener
    LoadBalancer:
      DependsOn: []
      Properties:
        LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'false'
        Name:
          Fn::Sub: ${AWS::StackName}
        Scheme: internet-facing
        SecurityGroups:
        - Ref: DefaultSecurityGroup
        Subnets:
        - subnet-1234a
        - subnet-1234b
        Tags: []
        Type: application
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    RecordSetForaliastestDOTbanDOTsigDOTsh:
      Properties:
        AliasTarget:
          DNSName:
            Fn::Sub: ${LoadBalancer.DNSName}.
          HostedZoneId:
            Fn::GetAtt:
            - LoadBalancer
            - CanonicalHostedZoneID
        HostedZoneId: ABC123
        Name: aliastest.ban.sig.sh
        Type: A
      Type: AWS::Route53::RecordSet
    RecordSetForaliastestDOTbanDOTsigDOTshforZoneABC321:
      Properties:
        AliasTarget:
          DNSName:
            Fn::Sub: ${LoadBalancer.DNSName}.
          HostedZoneId:
            Fn::GetAtt:
            - LoadBalancer
            - CanonicalHostedZoneID
        HostedZoneId: ABC321
        Name: aliastest.ban.sig.sh
        Type: A
      Type: AWS::Route53::RecordSet

